/* Copyright (C) 2016 RDA Technologies Limited and/or its affiliates("RDA").
 * All rights reserved.
 *
 * This software is supplied "AS IS" without any warranties.
 * RDA assumes no responsibility or liability for the use of the software,
 * conveys no license or title under any patent, copyright, or mask work
 * right to the product. RDA reserves the right to make changes in the
 * software without notification.  RDA also make no representation or
 * warranty that such application will be suitable for the specified use
 * without further testing or modification.
 */

// ================================================================================
/// @file         sxr_mem.hp
/// @par Memory management private header file.
// --------------------------------------------------------------------------------
/// @defgroup sx_mem SX Memory Managment
/// @{

#ifndef __SXR_MEM_HP__
#define __SXR_MEM_HP__

#include "sxs_type.h"
#include "sxr_ops.h"
#include "sxr_csp.h"


#ifdef __SXR_MEM_VAR__
#define DefExtern
#else
#define DefExtern extern
#endif


#define SXR_LOAD_HIST_GRANULARITY 10

DefExtern struct
{
    u32 *Top;
    u32 *End;
    u32 *Start;
    u32  CurSize;
    u32  LowestSize;
#ifndef __SXR_CLUSTER__
} sxr_Heap [PAL_NB_RAM_AREA + SXR_NB_MAX_POOL + SXR_NB_HEAP_USER];
#else
} sxr_Heap [PAL_NB_RAM_AREA + SXR_NB_HEAP_USER];
#endif

DefExtern struct
{
    void *Add;
    u16   Size;
    u16   AlignSize;
    u8    NbCluster;
    u8    FirstCluster;
    u16   NbAllocation;
    u16   LoadHist [SXR_LOAD_HIST_GRANULARITY];
} sxr_Cluster [SXR_NB_MAX_POOL];

DefExtern u8 sxr_NbCluster;

DefExtern struct
{
    u8    ExtraAllocationCnt;
    void  (*CallBack)(u32);
} sxr_MemoryAlert;

typedef struct
{
    u32 CallerAdd;
    u16 CheckSum;
    u16 DSize;
    u8  Link;
    u8  PIdx;
    u8  Next;
    u8  Index;
} sxr_MemHead_t;

typedef struct
{
    sxr_MemHead_t H;
    u32 Size;
} sxr_HMemHead_t;

typedef struct
{
    u8 PoolNb;     // Number of pools in the whole system
    u8 ClusterNb;  // Number of Cluter for following information
    u16 MaxBlockNb; // Max Number of blocks in the cluster
    u16 NbBlockAllocated; // Number of Allocated blocks in the cluster
    u16 ClusterSize;      // Size of 1 block
} sxr_ClusterCheck_t;



#define NIL_IDX                0xFF
#define SXR_POOL_FREE          0xFFFFFFFF
#define SXR_HEAP_ALLOCATED     0xAB
#define SXR_HEAP_NOT_ALLOCATED 0x00
#define SXR_HEAP_MEMORY        0x80
#define SXR_POOL_OVERFLOW      0x40

void sxr_SetCheckSum (u16 *Add);
u8   sxr_CheckSum (u16 *Add);

#ifdef __SXR_MEM_TRACKER__
typedef struct
{
    u32 *Add;
    u32  CallerAdd;
    u32  Stamp;
} sxr_MemTracker_t;

#define SXR_MEM_TRACK_DEEP 64

DefExtern struct
{
    sxr_MemTracker_t MemHeld [SXR_MEM_TRACK_DEEP];
    sxr_MemTracker_t MemFree [SXR_MEM_TRACK_DEEP];
    u32 Stamp;
    u16 HeldIdx;
    u16 FreeIdx;
} sxr_MemTracker;

// =============================================================================
// sxr_MemTrackAlloc
// -----------------------------------------------------------------------------
/// Get track of the memory allocation.
/// @param  Header  Pointer on sxr_HMemHead_t
// =============================================================================
void sxr_MemTrackAlloc (sxr_HMemHead_t *Header);

// =============================================================================
// sxr_MemTrackFree
// -----------------------------------------------------------------------------
/// Get track of the memory Free.
/// @param  Header  Pointer on sxr_HMemHead_t
// =============================================================================
void sxr_MemTrackFree (sxr_HMemHead_t *Header);
#endif


// =============================================================================
// sxr_SetCheckSum
// -----------------------------------------------------------------------------
/// Compute a checksum. Check sum is stored at the first word address.
/// It is calculated with the next 3 word xored.
/// @param  Add CheckSum address.
// =============================================================================
#define sxr_SetCheckSum(Add) ((u16 *)Add) [0] = (((u16 *)Add) [1] ^ ((u16 *)Add) [2] ^ ((u16 *)Add) [3])


// =============================================================================
// sxr_CheckSum
// -----------------------------------------------------------------------------
/// Check the checksum.
/// @param  Add CheckSum address.
/// @return TRUE when checksum is ok FALSE otherwise.
// =============================================================================
#define sxr_CheckSum(Add) ((((u16 *)Add) [0] ^ ((u16 *)Add) [1] ^ ((u16 *)Add) [2] ^ ((u16 *)Add) [3]) == 0)


#ifndef __TARGET__
DefExtern u32 sxr_NbUsedBlk
#ifdef __SXR_MEM_VAR__
    = 0
#endif
      ;
#endif // __TARGET__


#undef DefExtern

#endif

/// @} // <-- End of sx_mem group
