/* Copyright (C) 2016 RDA Technologies Limited and/or its affiliates("RDA").
 * All rights reserved.
 *
 * This software is supplied "AS IS" without any warranties.
 * RDA assumes no responsibility or liability for the use of the software,
 * conveys no license or title under any patent, copyright, or mask work
 * right to the product. RDA reserves the right to make changes in the
 * software without notification.  RDA also make no representation or
 * warranty that such application will be suitable for the specified use
 * without further testing or modification.
 */

// ================================================================================
/// @file         sxr_tksd.hp
/// @par Systeme executif tasks scheduler private header file.
// --------------------------------------------------------------------------------
/// @defgroup sx_task SX Task Scheduler
/// @{

#ifndef __SXR_TKSD_HP__
#define __SXR_TKSD_HP__

#include "sxs_type.h"
#include "sxr_ops.h"
#include "sxr_tksd.h"
#include "sxs_io.h"

#ifdef __SXR_TKSD_VAR__
#define DefExtern
#else
#define DefExtern extern
#endif

#define SXR_NO_TASK  0xFF

#define SXR_FREE_TSK        (1 << 0)
#define SXR_ALLOCATED_TSK   (1 << 1)
#define SXR_PENDING_TSK     (1 << 2)
#define SXR_SUSPENDED_TSK   (1 << 3)
#define SXR_ACTIVE_TSK      (1 << 4)
#define SXR_WAIT_MSG_TSK    (1 << 5)

#define SXR_STOPPED_TSK     SXR_ALLOCATED_TSK

typedef struct
{
    u32  *Sp;
    void *Pc;
    u32  *StackTop;
    sxr_TaskDesc_t const *Desc;
    void *DataCtx;
    u8    State;
    u8    Id;
    u8    Next;
    u8    Free;
} sxr_TaskCtx_t;

DefExtern struct
{
    sxr_TaskCtx_t Ctx [SXR_NB_MAX_TASK];
    u8 IdxFree;
    u8 Load;
    u8 Active;
    u8 Idle;
    u8 Suspended;
    u8 ScheduleDisable;
    u8 IdleReq;
} sxr_Task;

// =============================================================================
// sxr_WakeUpTask
// -----------------------------------------------------------------------------
/// Link task in the pending queue or activate the task if
/// start up is over and priority task is higher.
/// @param Id Task Id.
// =============================================================================
void sxr_WakeUpTask  (u8 Id);

// =============================================================================
// sxr_RunNextTask
// -----------------------------------------------------------------------------
/// Run the first pending task. Current active task is supposed
/// to be link in the queue corresponding to its state, except
/// in case of suspension.
// =============================================================================
void sxr_RunNextTask (void);

// =============================================================================
// sxr_RmvFromSuspendedQueue
// -----------------------------------------------------------------------------
/// Remove a task from the suspended queue.
/// @param Id Task Id.
// =============================================================================
void sxr_RmvFromSuspendedQueue (u8 Id);


// =============================================================================
// sxr_TaskSetUp
// -----------------------------------------------------------------------------
/// Set up task stack.
/// @param TaskCtx   Pointer onto task context.
/// @param TaskParam Pointer onto task param.
// =============================================================================
void sxr_TaskSetUp  (sxr_TaskCtx_t *TaskCtx, void *TaskParam);

// =============================================================================
// sxr_TaskFirst
// -----------------------------------------------------------------------------
/// Activation of the first task.
/// @param TaskCtx Pointer onto the task context.
// =============================================================================
void sxr_TaskFirst  (sxr_TaskCtx_t *TaskCtx);

// =============================================================================
// sxr_TaskSwap
// -----------------------------------------------------------------------------
/// Save Old task context and activate new task by restoring its context.
/// @param OldTaskCtx Pointer onto old task context.
/// @param NewTaskCtx Pointer onto new task context.
// =============================================================================
void sxr_TaskSwap   (sxr_TaskCtx_t *OldTaskCtx, sxr_TaskCtx_t *NewTaskCtx);


// =============================================================================
// sxr_GetTkPcInStack
// -----------------------------------------------------------------------------
/// Get the PC from the context stored on a task's stack.
/// @param Sp Stack pointer of a task.
/// @return   PC value.
// =============================================================================
u32  sxr_GetTkPcInStack (u32 *Sp);


// =============================================================================
// sxr_CheckTaskId
// -----------------------------------------------------------------------------
/// Check if a task ID is valid. If invalid, an exception will be raised.
/// @param  Id
// =============================================================================
static inline void sxr_CheckTaskId (u8 Id)
{
    if (UNLIKELY(Id >= SXR_NB_MAX_TASK))
    {
        SXS_RAISE ((_SXR|TABORT|TDB|TNB_ARG(1),TSTR("Task Id unconsistent: %d",0x06ab000c), Id));
    }
}


#undef DefExtern

#endif

/// @} // <-- End of sx_task group
