<archive asm="no">

<comment>
This document describes the structures provided to SPC for
both baseband processing and low-level HW control.
Includes the definition of the various buffers used by HW modules during Rx and Tx.
</comment>

<var name='SPP_EGPRS_IR_MEM_MAX_LEN' value='64*1024'>
    <comment>size of the memory used for saving the IR blocks</comment>
</var>
<var name='SPP_EGPRS_IR_SNS' value='2048'>
    <comment>TBF modulo</comment>
</var>

<var name='SPP_EGPRS_TX_BURST_LEN' value='44'>
    <comment>Size in bytes of on one Tx burst buffer</comment>
</var>

<var name='MCS_1_TO_4_UNCOMPRESSED_BLOCK_LEN' value='372'>
    <comment>size in bytes of one received MCS1 to MCS4 block prior to decoding</comment>
</var>
<var name='MCS_5_TO_6_UNCOMPRESSED_BLOCK_LEN' value='1248'>
    <comment>size in bytes of one received MCS5 to MCS6 block prior to decoding</comment>
</var>
<var name='MCS_7_TO_9_UNCOMPRESSED_BLOCK_LEN' value='612'>
    <comment>size in bytes of one received MCS7 to MCS9 block prior to decoding</comment>
</var>

<var name='MCS_1_TO_4_BLOCK_LEN' value='MCS_1_TO_4_UNCOMPRESSED_BLOCK_LEN/2'>
    <comment>size in bytes of one compressed MCS1 to MCS4 block prior to decoding</comment>
</var>
<var name='MCS_5_TO_6_BLOCK_LEN' value='MCS_5_TO_6_UNCOMPRESSED_BLOCK_LEN/2'>
    <comment>size in bytes of one compressed MCS5 to MCS6 block prior to decoding</comment>
</var>
<var name='MCS_7_TO_9_BLOCK_LEN' value='MCS_7_TO_9_UNCOMPRESSED_BLOCK_LEN/2'>
    <comment>size in bytes of one compressed MCS7 to MCS9 block prior to decoding</comment>
</var>

<var name='MCS_1_TO_4_BUFFER_LEN' value='SPP_EGPRS_IR_MEM_MAX_LEN/MCS_1_TO_4_BLOCK_LEN'>
    <comment>number of compressed MCS1 to MCS4 blocks that can be stored in the IR memory</comment>
</var>
<var name='MCS_5_TO_6_BUFFER_LEN' value='SPP_EGPRS_IR_MEM_MAX_LEN/MCS_5_TO_6_BLOCK_LEN'>
    <comment>number of compressed MCS5 to MCS6 blocks that can be stored in the IR memory</comment>
</var>
<var name='MCS_7_TO_9_BUFFER_LEN' value='SPP_EGPRS_IR_MEM_MAX_LEN/MCS_7_TO_9_BLOCK_LEN'>
    <comment>number of compressed MCS7 to MCS9 blocks that can be stored in the IR memory</comment>
</var>

<var name='MCS_MAX_BLOCK_LEN' value='MCS_5_TO_6_BLOCK_LEN'>
    <comment>maximum size of one received blocks regardless of the mode</comment>
</var>
<var name='MCS_MAX_BUFFER_LEN' value='MCS_1_TO_4_BUFFER_LEN'>
    <comment>maximum number of blocks that can contain the IR memory regardless of the mode</comment>

</var>
<var name='SPP_EGPRS_SIZE_HEAD_DECODE_MCS789' value='29'>
    <comment>size of table that gives the correct coding scheme between MCS7, MCS8 and MCS9 after the header decoding</comment>

</var>
<var name='SPP_EGPRS_SIZE_HEAD_DECODE_MCS56' value='6'>
    <comment>size of table that gives the correct coding scheme between MCS5 and MCS6 after the header decoding</comment>

</var>
<var name='SPP_EGPRS_SIZE_HEAD_DECODE_MCS1234' value='13'>
    <comment>size of table that gives the correct coding scheme between MCS1, MCS2, MCS3 and MCS4 after the header decoding</comment>

</var>
<var name='TRAIN_SEQ_LENGTH' value='26'>
    <comment>length of the training sequence</comment>
</var>
<var name='HALF_BURST_LEN' value='61'>
    <comment>length of the training sequence</comment>
</var>
<var name='SPP_LSE_TAP_NB' value='8'>
    <comment>length of the training sequence</comment>
</var>
<var name='QP' value='10'>
    <comment>quality factor for the prefilter</comment>
</var>
<var name='MAIN_TAP_LEN' value='2'>
    <comment>number of taps used in the DDFSE treillis</comment>
</var>
<var name='ALL_TAP_LEN' value='6'>
    <comment>number of taps used in the DDFSE equalizer</comment>
</var>
<var name='SOVA_ALL_TAP_LEN' value='8'>
    <comment>number of taps used in the SOVA equalizer</comment>
</var>
<var name='STATE_LEN' value='8'>
    <comment>size of the treillis for 8PSK equal to 8**(MAIN_TAP_LEN-1)</comment>
</var>
<var name='HASH_LEN' value='64'>
    <comment>length of the HASH TABLE (for IR)</comment>
</var>
<var name='SPP_EGPRS_IR_UNIT_SIZE' value='MCS_5_TO_6_BLOCK_LEN/2'>
    <comment>size of IR buffer unit in bytes</comment>
</var>
<var name='SPP_EGPRS_IR_BUF_MAX_SIZE' value='SPP_EGPRS_IR_MEM_MAX_LEN/SPP_EGPRS_IR_UNIT_SIZE'>
    <comment>unit number in IR buffer</comment>
</var>
<var name='SPP_EDGE_HEAD_ERROR_COUNT' value='0x1'>
    <comment>head error counting flag</comment>
</var>
<var name='SPP_EDGE_DATA_ERROR_COUNT0' value='0x2'>
    <comment>data error counting flag, block0</comment>
</var>
<var name='SPP_EDGE_DATA_ERROR_COUNT1' value='0x4'>
    <comment>data error counting flag, block0</comment>
</var>

<enum name='SPP_EGPRS_HEADER_DATA_DISCRIMINATOR'>
    <comment>discrimination between header and data for Egprs</comment>
    <entry name='HEAD_COD'></entry>
    <entry name='DATA_COD'></entry>
</enum>

<var name='SUCCESS' value='0'>
    <comment>crc decoding successful</comment>
</var>

<var name='FAIL' value='1'>
    <comment>crc decoding failing</comment>
</var>


<typedef name='SPP_FCCH_RESULT'>
    <comment>FCCH Result</comment>

    <int16 name='FOf'></int16>
    <int16 name='TOf'></int16>
</typedef>

<typedef name='SPP_FCCH_PARAM'>
    <int32 name='Acc_Energy'></int32>
    <int32 name='Acc_Corr_I'></int32>
    <int32 name='Acc_Corr_Q'></int32>
    <uint32 name='Max_Abs_Corr'></uint32>
    <int32 name='Corr_order_I'></int32>
    <int32 name='Corr_order_Q'></int32>
    <int16 name='samples_left'></int16>
    <int16 name='max_index'></int16>
    <uint8 name='FCCH_detected'></uint8>
    <uint8 name='counter_high'></uint8>
    <uint8 name='counter_low'></uint8>
    <uint8 name='lastIT'></uint8>
    <uint8 name='debug'></uint8>
</typedef>

<typedef name='SPP_COMPLEX'>
    <int16 name='i'></int16>
    <int16 name='q'></int16>
</typedef>

<typedef name='SPP_SCH_RESULT'>
    <comment>SCH Result</comment>

    <uint16 name='Pwr'></uint16>
    <int16 name='Snr'></int16>
    <int16 name='FOf'></int16>
    <uint8 name='TOf'></uint8>
    <uint8 name='Data' count='4'></uint8>
</typedef>

<typedef name='SPP_N_BURST_RESULT'>
    <comment>Normal Burst Result</comment>

    <uint16 name='Pwr'></uint16>
    <int16 name='Snr'></int16>
    <int16 name='FOf'></int16>
    <uint8 name='TOf'></uint8>
    <instance name='Dco' type='SPP_COMPLEX'></instance>
</typedef>

<typedef name='SPP_N_BLOCK_RESULT'>
    <comment>Normal block Result</comment>

    <bool name='Bfi'></bool>
    <uint8 name='Cs'></uint8>
    <uint8 name='Voc_Sid'></uint8>
    <uint8 name='MeanBEP'></uint8>
    <uint8 name='CvBEP'></uint8>
    <uint16 name='BitError'></uint16>
    <uint16 name='BitTotal'></uint16>
</typedef>

<typedef name='SPP_HEADER_RESULT'>
    <comment>Header structure for Egprs</comment>

    <uint16 name='bsn' count='2'></uint16>
    <uint8 name='mcs'></uint8>
    <uint8 name='cps' count='2'></uint8>
    <uint8 name='spb'></uint8>
    <uint8 name='bfi'></uint8>
    <uint8 name='tfi'></uint8>
    <uint8 name='biterr'></uint8>
</typedef>

<typedef name='SPP_NB_VITAC'>
    <comment>Viterbi NB Equalisation Buffers Structure  SPAL_ISI is fixed, equal to 5</comment>

    <uint32 name='PathMetric' ckeywords='VOLATILE' count='2*16/2'>
        <comment>2068 bytes</comment>
    </uint32>
    <uint32 name='path_diff_bkw' ckeywords='VOLATILE' count='61*16/4'></uint32>
    <uint32 name='path_diff_fwd' ckeywords='VOLATILE' count='61*16/4'></uint32>
    <int16 name='Xcorr' ckeywords='VOLATILE' count='2*(8+5+1)'></int16>
</typedef>

<typedef name='SPP_SCH_VITAC'>
    <comment>Viterbi SCH Equalisation Buffers Structure</comment>

    <uint32 name='PathMetric' ckeywords='VOLATILE' count='2*16/2'>
        <comment>1643 bytes</comment>
    </uint32>
    <uint32 name='path_diff_bkw' ckeywords='VOLATILE' count='42*16/4'></uint32>
    <uint32 name='path_diff_fwd' ckeywords='VOLATILE' count='42*16/4'></uint32>
    <int32 name='Xcorr_I' ckeywords='VOLATILE' count='24+5'></int32>
    <int32 name='Xcorr_Q' ckeywords='VOLATILE' count='24+5'></int32>
</typedef>

<typedef name='SPP_DECODE_VITAC'>
    <comment>Viterbi Decoding Buffers Structure</comment>

    <uint32 name='RxItlvBufferOut' ckeywords='VOLATILE' count='114'>
        <comment>2144 bytes</comment>
    </uint32>
    <uint32 name='ViterbiOut' ckeywords='VOLATILE' count='16'></uint32>
    <uint32 name='SurvivorMEM' ckeywords='VOLATILE' count='(64*171)/(16*2)'></uint32>
    <uint32 name='PathMetric' ckeywords='VOLATILE' count='64'></uint32>
</typedef>


<typedef name='SPP_EGPRS_PREFILTER_BUFS'>

<instance name='InArray' type='SPP_COMPLEX' count='157'></instance>
<instance name='RLS_W' type='SPP_COMPLEX' count='8'></instance>
<instance name='PrefiltMin' type='SPP_COMPLEX' count='10+8'></instance>
<instance name='PrefiltMax' type='SPP_COMPLEX' count='10+8'></instance>
<instance name='LpChan' type='SPP_COMPLEX' count='8'></instance>
<instance name='A1' type='SPP_COMPLEX' count='8'></instance>
<instance name='A2' type='SPP_COMPLEX' count='10'></instance>
<instance name='P_Array' type='SPP_COMPLEX' count='10+1'></instance>
<instance name='P_Array_New' type='SPP_COMPLEX' count='10'></instance>
<instance name='H_CorArray' type='SPP_COMPLEX' count='2*8-1'></instance>
<instance name='LocalTsc' type='SPP_COMPLEX' count='16'></instance>
<instance name='TscSym' type='SPP_COMPLEX' count='26'></instance>
<instance name='DcIqBufs' type='SPP_COMPLEX' count='11'></instance>
</typedef>

<typedef name='SPP_EGPRS_DDFSE_BUFS'>

<instance name='InArray' type='SPP_COMPLEX' ckeywords='VOLATILE' count='157'></instance>
<instance name='RLS_W' type='SPP_COMPLEX' ckeywords='VOLATILE' count='8'></instance>
<instance name='PrefiltMin' type='SPP_COMPLEX' ckeywords='VOLATILE' count='10+8'></instance>
<instance name='PrefiltMax' type='SPP_COMPLEX' ckeywords='VOLATILE' count='10+8'></instance>
<instance name='LpChan' type='SPP_COMPLEX' ckeywords='VOLATILE' count='8'></instance>
<instance name='BmmlZfMetric' type='SPP_COMPLEX' ckeywords='VOLATILE' count='6/2 * 8 * 8 + 1'></instance>
<uint8 name='SoftOutputFwd' ckeywords='VOLATILE' count='8*61*4'></uint8>
<uint8 name='SoftOutputBck' ckeywords='VOLATILE' count='8*61*4'></uint8>
<uint8 name='TscSym' count='26'></uint8>
</typedef>



<typedef name='SPP_EGPRS_DDFSE_BUFS_PART1'>
    <comment>EGPRS DDFSE Buffers, Part 1</comment>
    <uint8 name='SoftOutputFwd' ckeywords='VOLATILE' count='8*61*4'></uint8>
    <instance name='RLS_W' type='SPP_COMPLEX' ckeywords='VOLATILE' count='8'></instance>
    <instance name='PrefiltMin' type='SPP_COMPLEX' ckeywords='VOLATILE' count='10+8'></instance>
    <instance name='PrefiltMax' type='SPP_COMPLEX' ckeywords='VOLATILE' count='10+8'></instance>
    <instance name='LpChan' type='SPP_COMPLEX' ckeywords='VOLATILE' count='8'></instance>
</typedef>


<typedef name='SPP_EGPRS_DDFSE_BUFS_PART2'>
    <comment>EGPRS DDFSE Buffers, Part 2</comment>
    <instance name='InArray' type='SPP_COMPLEX' ckeywords='VOLATILE' count='157'></instance>
    <instance name='BmmlZfMetric' type='SPP_COMPLEX' ckeywords='VOLATILE' count='6/2 * 8 * 8 + 1'></instance>
    <uint8 name='SoftOutputBck' ckeywords='VOLATILE' count='8*61*4'></uint8>
    <uint8 name='TscSym' count='26'></uint8>
</typedef>

<typedef name='SPP_EGPRS_DECODE_VITAC'>
    <comment>Viterbi Decoding Buffers Structure</comment>

    <uint32 name='CombinedData' ckeywords='VOLATILE' count='459'></uint32>
    <uint32 name='SurvivorData' ckeywords='VOLATILE' count='(64*612)/(16*2)'></uint32>
    <uint32 name='PunctTable' ckeywords='VOLATILE' count='58'></uint32>
    <uint32 name='PathMetric' ckeywords='VOLATILE' count='64'></uint32>
    <uint32 name='DecodedData' ckeywords='VOLATILE' count='20'></uint32>
</typedef>

<typedef name='SPP_EGPRS_DECODE_VITAC_PART1'>
    <comment>Viterbi Decoding Buffers Structure, PART1.[NOTE: CombinedData: extra 1 words used to leave extra space for excor when ir recombining]</comment>

    <uint32 name='CombinedData' ckeywords='VOLATILE' count='459+1'></uint32>
    <uint32 name='PunctTable' ckeywords='VOLATILE' count='58'></uint32>
    <uint32 name='DecodedData' ckeywords='VOLATILE' count='20'></uint32>
</typedef>

<typedef name='SPP_EGPRS_DECODE_VITAC_PART2'>
    <comment>Viterbi Decoding Buffers Structure, PART2</comment>

    <uint32 name='SurvivorData' ckeywords='VOLATILE' count='(64*612)/(16*2)'></uint32>
</typedef>

<typedef name='SPP_EGPRS_IRCOMB_TMPBUF'>
    <comment>IR combination combination temporary buffers. tansferring buffers for hardware combination</comment>
    <uint8 name='buf0' count='1836'></uint8>
    <uint8 name='buf1' count='1836'></uint8>
    <uint8 name='transbuf0' count='SPP_EGPRS_IR_UNIT_SIZE'></uint8>
    <uint8 name='transbuf1' count='SPP_EGPRS_IR_UNIT_SIZE'></uint8>
</typedef>

<typedef name='SPP_EGPRS_IRCOMB_TMPBUF2'>
    <comment>IR combination combination temporary buffers. tansferring buffers for hardware combination</comment>
    <uint8 name='buf0' count='1836+64*4'></uint8>
    <uint8 name='buf1' count='1836+64*4'></uint8>
    <uint8 name='transbuf0' count='SPP_EGPRS_IR_UNIT_SIZE'></uint8>
    <uint8 name='transbuf1' count='SPP_EGPRS_IR_UNIT_SIZE'></uint8>
</typedef>


<enum name='SPP_CODING_SCHEME'>
    <comment>This is an exhaustive enum containing all the coding schemes for GSM/GPRS/EGPRS</comment>
    <comment>It has been designed to optimise table size, do NOT modify without knowing EXACTLY the impact !</comment>
    <comment>CS needing SRC are packed toghether</comment>
    <comment>CS that doesn't need CRC/CONV params are packed toghether at the END to reduce tables</comment>

    <entry name='CS_RACH'></entry>
    <entry name='CS_PRACH'></entry>
    <entry name='CS_SCH'></entry>
    <entry name='CS_CS1'></entry>
    <entry name='CS_CS2'></entry>
    <entry name='CS_CS3'></entry>
    <entry name='CS_CS4'></entry>
    <entry name='CS_HEAD_1'></entry>
    <entry name='CS_HEAD_2'></entry>
    <entry name='CS_HEAD_3'></entry>
    <entry name='CS_MCS1'></entry>
    <entry name='CS_MCS2'></entry>
    <entry name='CS_MCS3'></entry>
    <entry name='CS_MCS4'></entry>
    <entry name='CS_MCS5'></entry>
    <entry name='CS_MCS6'></entry>
    <entry name='CS_MCS7'></entry>
    <entry name='CS_MCS8'></entry>
    <entry name='CS_MCS9'></entry>
    <entry name='CS_HR'></entry>
    <entry name='CS_FR'></entry>
    <entry name='CS_EFR'></entry>
    <entry name='CS_H24'></entry>
    <entry name='CS_H48'></entry>
    <entry name='CS_F24'></entry>
    <entry name='CS_F48'></entry>
    <entry name='CS_F96'></entry>
    <entry name='CS_F144'></entry>
    <entry name='CS_AFS_SPEECH_122'></entry>
    <entry name='CS_AFS_SPEECH_102'></entry>
    <entry name='CS_AFS_SPEECH_795'></entry>
    <entry name='CS_AFS_SPEECH_74'></entry>
    <entry name='CS_AFS_SPEECH_67'></entry>
    <entry name='CS_AFS_SPEECH_59'></entry>
    <entry name='CS_AFS_SPEECH_515'></entry>
    <entry name='CS_AFS_SPEECH_475'></entry>
    <entry name='CS_AHS_SPEECH_795'></entry>
    <entry name='CS_AHS_SPEECH_74'></entry>
    <entry name='CS_AHS_SPEECH_67'></entry>
    <entry name='CS_AHS_SPEECH_59'></entry>
    <entry name='CS_AHS_SPEECH_515'></entry>
    <entry name='CS_AHS_SPEECH_475'></entry>
    <entry name='CS_AFS_SID_UPDATE'></entry>
    <entry name='CS_AFS_RATSCCH'></entry>
    <entry name='CS_AHS_SID_UPDATE'></entry>
    <entry name='CS_AHS_RATSCCH_DATA'></entry>
    <entry name='CS_AFS_SID_FIRST'></entry>
    <entry name='CS_AFS_ONSET'></entry>
    <entry name='CS_AHS_SID_UPDATE_INH'></entry>
    <entry name='CS_AHS_SID_FIRST_P1'></entry>
    <entry name='CS_AHS_SID_FIRST_P2'></entry>
    <entry name='CS_AHS_SID_FIRST_INH'></entry>
    <entry name='CS_AHS_ONSET'></entry>
    <entry name='CS_AHS_RATSCCH_MARKER'></entry>
    <entry name='CS_QTY'></entry>
</enum>

<var name='CS_NEED_SRC' value='CS_AFS_SPEECH_122'>
    <comment>Offset for the SRC tables</comment>
</var>
<var name='CS_END_NEED_SRC' value='CS_AFS_SID_FIRST'>
    <comment>Offset for Post SRC tables</comment>
</var>
<var name='CS_PARAM_QTY' value='CS_END_NEED_SRC'>
    <comment>size of the CRC/CONV table</comment>
</var>
<var name='CS_SRC_PARAM_QTY' value='CS_END_NEED_SRC - CS_NEED_SRC'>
    <comment>size of the SRC table</comment>
</var>


<enum name='SPP_SPEECH_MODE'>
    <comment>vocoder mode</comment>

    <entry name='SPP_MR475_MODE'></entry>
    <entry name='SPP_MR515_MODE'></entry>
    <entry name='SPP_MR59_MODE'></entry>
    <entry name='SPP_MR67_MODE'></entry>
    <entry name='SPP_MR74_MODE'></entry>
    <entry name='SPP_MR795_MODE'></entry>
    <entry name='SPP_MR102_MODE'></entry>
    <entry name='SPP_MR122_MODE'></entry>
    <entry name='SPP_FR_MODE'></entry>
    <entry name='SPP_HR_MODE'></entry>
    <entry name='SPP_EFR_MODE'></entry>
    <entry name='SPP_INVALID_MODE'></entry>
</enum>

<enum name='SPP_RX_FRAME_TYPE'>
    <comment>AMR enum</comment>

    <entry name='SPP_RX_SPEECH_GOOD'></entry>
    <entry name='SPP_RX_SPEECH_DEGRADED'></entry>
    <entry name='SPP_RX_ONSET'></entry>
    <entry name='SPP_RX_SPEECH_BAD'></entry>
    <entry name='SPP_RX_SID_FIRST'></entry>
    <entry name='SPP_RX_SID_UPDATE'></entry>
    <entry name='SPP_RX_SID_BAD'></entry>
    <entry name='SPP_RX_NO_DATA'></entry>
</enum>

<enum name='SPP_TX_FRAME_TYPE'>
    <entry name='SPP_TX_SPEECH'></entry>
    <entry name='SPP_TX_SID_FIRST'></entry>
    <entry name='SPP_TX_SID_UPDATE'></entry>
    <entry name='SPP_TX_NO_DATA'></entry>
</enum>

<typedef name='SPP_AMR_CFG'>
    <comment>AMR Config</comment>

    <uint8 name='activeCodecSet' count='4'></uint8>
    <uint8 name='hysteresis' count='3'></uint8>
    <uint8 name='threshold' count='3'></uint8>
    <uint8 name='version'></uint8>
    <uint8 name='noiseSuppression'></uint8>
    <uint8 name='startModeIdx'></uint8>
    <uint8 name='nbActiveCodecSet'></uint8>
    <uint8 name='phase'></uint8>
</typedef>

<enum name='SPP_AFS_TYPE'>
    <entry name='SPP_AFS_SID_UPDATE'></entry>
    <entry name='SPP_AFS_SID_FIRST'></entry>
    <entry name='SPP_AFS_ONSET'></entry>
    <entry name='SPP_AFS_SPEECH'></entry>
    <entry name='SPP_AFS_RATSCCH'></entry>
    <entry name='SPP_AFS_NO_DATA'></entry>
</enum>

<enum name='SPP_AHS_TYPE'>
    <entry name='SPP_AHS_SID_UPDATE'></entry>
    <entry name='SPP_AHS_SID_UPDATE_INH'></entry>
    <entry name='SPP_AHS_SID_FIRST_P1'></entry>
    <entry name='SPP_AHS_SID_FIRST_P2'></entry>
    <entry name='SPP_AHS_SID_FIRST_INH'></entry>
    <entry name='SPP_AHS_ONSET'></entry>
    <entry name='SPP_AHS_SPEECH'></entry>
    <entry name='SPP_AHS_RATSCCH_MARKER'></entry>
    <entry name='SPP_AHS_RATSCCH_DATA'></entry>
    <entry name='SPP_AHS_NO_DATA'></entry>
</enum>

<enum name='SPP_FCCH_RETURN'>
    <entry name='FCCH_FOUND'></entry>
    <entry name='FCCH_NOT_FOUND'></entry>
    <entry name='FCCH_INVALID'></entry>
</enum>

<enum name='SPP_FCCH_MODE'>
    <entry name='FCCH_SLICED'></entry>
    <entry name='FCCH_FULL'></entry>
</enum>

<enum name='SPP_ITLV_TYPE'>
    <entry name='ITLV_TYPE_1A' value='0'></entry>
    <entry name='ITLV_TYPE_1B' value='1'></entry>
    <entry name='ITLV_TYPE_1C' value='2'></entry>
    <entry name='ITLV_TYPE_2A' value='3'></entry>
    <entry name='ITLV_TYPE_2B' value='4'></entry>
    <entry name='ITLV_TYPE_3' value='5'></entry>
    <entry name='ITLV_TYPE_D1' value='6'></entry>
    <entry name='ITLV_TYPE_D2' value='7'></entry>
    <entry name='ITLV_TYPE_D3' value='8'></entry>
    <entry name='ITLV_TYPE_H1' value='9'></entry>
    <entry name='ITLV_TYPE_H2' value='10'></entry>
    <entry name='ITLV_TYPE_H3' value='11'></entry>
    <entry name='ITLV_TYPE_H4' value='12'></entry>
</enum>

<enum name='SPP_MODULATION_TYPE'>
    <entry name='SPP_UNKNOWN_MOD'></entry>
    <entry name='SPP_GMSK_MOD'></entry>
    <entry name='SPP_8PSK_MOD'></entry>
</enum>

<enum name='SPP_HEADER_TYPE'>
    <entry name='SPP_HEADER_TYPE1'></entry>
    <entry name='SPP_HEADER_TYPE2'></entry>
    <entry name='SPP_HEADER_TYPE3'></entry>
    <entry name='SPP_HEADER_UNKNOWN'></entry>
    <entry name='SPP_HEADER_CS1'></entry>
</enum>

<enum name='SPP_DUMMY_PCH_RESULT'>
    <entry name='SPP_DUMMY_PCH_NOT_DETECTED' value='0'></entry>
    <entry name='SPP_DUMMY_PCH_A_DETECTED' value='1'></entry>
    <entry name='SPP_DUMMY_PCH_AB_DETECTED' value='2'></entry>
    <entry name='SPP_PCH_DECODING_COMPLETE' value='3'></entry>
    <entry name='SPP_DUMMY_PCH_NO_RESULT' value='0xFF'></entry>
</enum>

<enum name='SPP_FCCH_DELAY_TYPE'>
    <entry name='FCCH_DELAY2' value='0'></entry>
    <entry name='FCCH_DELAY4' value='1'></entry>
</enum>

<typedef name='SPP_LOGPWR_FILTER'>
    <comment>logpwr filter structure</comment>

    <int8 name='logpwr_save'></int8>
    <int8 name='out'></int8>
    <uint8 name='cnt'></uint8>
    <uint8 name='sum'></uint8>
</typedef>

</archive>
